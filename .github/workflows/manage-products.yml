name: Manage Products (no-terminal)

on:
  workflow_dispatch:
    inputs:
      op:
        description: "Operação"
        required: true
        type: choice
        options: [add, remove, list]
        default: add
      id:
        description: "ID do produto (obrigatório p/ add/remove)"
        required: false
        type: string
      name:
        description: "Nome (add)"
        required: false
        type: string
      price:
        description: "Preço em BRL (ex: 59.9) (add)"
        required: false
        type: string
      category:
        description: "Categoria (add)"
        required: false
        type: string
      image:
        description: "URL da imagem (add)"
        required: false
        type: string
      description:
        description: "Descrição (add)"
        required: false
        type: string
      buyUrl:
        description: "URL de compra (WhatsApp ou checkout) (add)"
        required: false
        type: string
      stock:
        description: "Estoque (número) (add)"
        required: false
        type: string

jobs:
  manage:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # permite commitar com GITHUB_TOKEN
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure products file exists
        run: |
          mkdir -p frontend/public/data
          if [ ! -f frontend/public/data/products.json ]; then
            echo "[]" > frontend/public/data/products.json
          fi

      - name: Apply operation
        id: apply
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'frontend/public/data/products.json';

            const op    = core.getInput('op');
            const id    = core.getInput('id') || '';
            const name  = core.getInput('name') || '';
            const price = core.getInput('price') || '';
            const cat   = core.getInput('category') || '';
            const img   = core.getInput('image') || '';
            const desc  = core.getInput('description') || '';
            const buy   = core.getInput('buyUrl') || '';
            const stock = core.getInput('stock') || '';

            const raw = fs.readFileSync(path, 'utf8');
            let list = [];
            try { list = JSON.parse(raw); } catch { list = []; }

            if (op === 'list') {
              core.notice(`Produtos atuais: ${list.length}`);
              core.setOutput('changed', 'false');
              return;
            }

            if (!id) core.setFailed('ID é obrigatório para add/remove.');

            if (op === 'remove') {
              const before = list.length;
              list = list.filter(p => String(p.id) !== String(id));
              fs.writeFileSync(path, JSON.stringify(list, null, 2));
              core.notice(`Removidos: ${before - list.length}`);
              core.setOutput('changed', 'true');
              return;
            }

            if (op === 'add') {
              // normaliza preço
              const priceNum = price ? Number(String(price).replace(',', '.')) : 0;
              const prod = {
                id,
                name,
                price: isNaN(priceNum) ? price : priceNum,
                image: img,
                description: desc,
                category: cat,
                buyUrl: buy,
              };
              if (stock) prod.stock = Number(stock);

              // se já existe, atualiza; senão, insere
              const idx = list.findIndex(p => String(p.id) === String(id));
              if (idx >= 0) list[idx] = { ...list[idx], ...prod };
              else list.push(prod);

              fs.writeFileSync(path, JSON.stringify(list, null, 2));
              core.notice(`Produto ${idx>=0?'atualizado':'adicionado'}: ${id}`);
              core.setOutput('changed', 'true');
              return;
            }

            core.setFailed(`Operação desconhecida: ${op}`);

      - name: Commit changes
        if: steps.apply.outputs.changed == 'true'
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add frontend/public/data/products.json
          git commit -m "chore(products): ${{ github.event.inputs.op }} ${{ github.event.inputs.id }}"
          git push
